{"version":3,"sources":["Components/Loading/Loading.tsx","Router/Router.ts","AppRouter.tsx","i18n/i18n.js","index.tsx","Utils/localStorageConfig.ts","Utils/sessionStorage.ts"],"names":["Loading","className","size","Home","lazy","Login","Register","App","fallback","exact","path","component","language","getSessionItem","LANGUAGE","setSessionItem","i18n","use","initReactI18next","init","resources","en","zn","lng","fallbackLng","keySeparator","interpolation","escapeValue","ReactDOM","render","document","getElementById","key","val","sessionStorage","setItem","getItem"],"mappings":"mPAYeA,G,OATY,WACzB,OACE,yBAAKC,UAAU,qBACb,uBAAMC,KAAK,UACX,+ECNOC,EAAOC,gBAAK,kBAAM,uDAClBC,EAAQD,gBAAK,kBAAM,uDACnBE,EAAWF,gBAAK,kBAAM,uDAMhBA,gBAAK,kBAAM,uDCcfG,MAnBf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUO,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWL,U,gDCA7CM,EAAW,GACXC,YAAeC,KACfF,EAAWC,YAAeC,MAE1BC,YAAeD,IAAU,MACzBF,EAAW,MAEfI,IACKC,IAAIC,KACJC,KAAK,CACFC,UAAW,CACPC,GAAIA,EACJC,GAAIA,GAERC,IAAKX,EACLY,YAAaZ,EACba,cAAc,EACdC,cAAe,CACXC,aAAa,KAGVX,EAAf,EC5BAY,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U,gCCR1B,kCAAO,IACMjB,EAAmB,Y,gCCAhC,oEAAO,IAAMC,EAAqD,SAACiB,EAAaC,GAC5EC,eAAeC,QAAQH,EAAKC,IAEnBpB,EAAuC,SAACmB,GACjD,OAAOE,eAAeE,QAAQJ,K","file":"static/js/main.96094f5c.chunk.js","sourcesContent":["import React from 'react'\nimport { Spin } from 'antd'\nimport './loading.less'\nconst Loading: () => any = () => {\n  return (\n    <div className='loading_container'>\n      <Spin size='large' />\n      <span>页面加载中···</span>\n    </div>\n  )\n}\n\nexport default Loading\n","import React, { lazy } from 'react'\nexport const Home = lazy(() => import('pages/Home/Home'));\nexport const Login = lazy(() => import('pages/Home/Home'));\nexport const Register = lazy(() => import('pages/Home/Home'));\nexport const routerList = [\n    // 首页\n    {\n        path: '/',\n        title: '首页',\n        component: lazy(() => import('pages/Home/Home'))\n    },\n]","import React, { Suspense, lazy } from 'react';\nimport { Switch, Route, Link, HashRouter as Router, } from 'react-router-dom';\nimport Loading from 'components/Loading/Loading';\nimport { Login, Register, Home } from 'router/Router';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Suspense fallback={<Loading />}>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/register\" component={Register} />\n            </Switch>\n          </Suspense>\n        </Switch>\n      </Router>\n    </div>\n  );\n\n}\n\nexport default App;\n","import i18n from \"i18next\";\nimport {\n    initReactI18next\n} from \"react-i18next\";\nimport {\n    LANGUAGE\n} from 'utils/localStorageConfig';\nimport en from './en.json'\nimport zn from './zn.json'\nimport {\n    getSessionItem,\n    setSessionItem\n} from 'utils/sessionStorage';\nlet language = '';\nif (getSessionItem(LANGUAGE)) {\n    language = getSessionItem(LANGUAGE)\n} else {\n    setSessionItem(LANGUAGE, 'zn')\n    language = 'zn'\n}\ni18n\n    .use(initReactI18next)\n    .init({\n        resources: {\n            en: en,\n            zn: zn\n        },\n        lng: language,\n        fallbackLng: language,\n        keySeparator: false,\n        interpolation: {\n            escapeValue: false\n        }\n    });\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './AppRouter';\nimport 'i18n/i18n';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);","export const TOKEN: string = 'token'; // 左侧菜单\nexport const LANGUAGE: string = 'language'; // 左侧菜单","\nexport const setSessionItem: (key: string, val: string) => void = (key: string, val: string) => {\n    sessionStorage.setItem(key, val);\n}\nexport const getSessionItem: (key: string) => any = (key: string) => {\n    return sessionStorage.getItem(key);\n}\nexport const removeSessionItem: (name: string) => void = (name: string) => {\n    sessionStorage.removeItem(name)\n}\nexport const clearSessionStorage: () => void = () => {\n    sessionStorage.clear()\n}"],"sourceRoot":""}